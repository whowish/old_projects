<%
    params[:offset] ||= 0
    params[:limit] ||= 10
	params[:offset] = params[:offset].to_i
 	params[:limit] =  params[:limit].to_i

	count = Article[entity.id].comments.count
    all_comments = Article[entity.id].comments[params[:offset],params[:offset]+params[:limit]-1]
%>
<span class="span-69 margin-left-1 margin-top-1" id="comment_panel">
	<span class="span-69 height20 normal_font dark_gray font12">
		<a href="#" class="agree_icon">
		</a>
		<span class="margin-left-1">
			20,000 people like this lesson
		</span>
	</span>
	<%=render :partial=>"/article_comment/comment_add",:locals=>{:entity=>Article[entity.id]}%>
	<span class="comment_display_unit">
		<ul>
			<span id="new_comment"></span>
			<%
            	all_comments.each do |comment|
        	%>
				
	            <%=render :partial=>"/article_comment/comment_view",:locals=>{:entity=>comment}%>
				
        	<%end%>
		</ul>
	</span>
	<%
        if count > params[:limit].to_i
    %>
    <span class="span-68 clearfix margin-top-1">
        <span class="span-68 clearfix">

        </span>
        <span class="span-68">
            <span class="margin-left-4px total_page squeks_blue_bg">
            	<%=word_for :paging, :from=>(params[:offset].to_i+1), :to=>([(params[:offset].to_i+params[:limit].to_i),count].min),:total=>count%>
            </span>
            <span class="page_number">
                <ul>
                	<%
						pages = []

						current_page = (params[:offset] / params[:limit])+1

						number_of_pages = (count.to_f/params[:limit].to_f).ceil
						if number_of_pages > 10
							pages = [current_page]

							
							# span on current page
							(1..5).each { |i|
								pages.unshift(current_page-i) if (current_page-i) >= 1
								pages.push(current_page+i)  if (current_page+i) <= number_of_pages
							}


							# add head and tail
							[3,2,1].each { |i|
								logger.debug { "#{i} #{pages.first}" }
								pages = pages.unshift(i) if i < pages.first
								pages = pages.push(number_of_pages - i + 1) if (number_of_pages - i + 1) > pages.last
							}
							
						else
							pages = (1..number_of_pages)
						end

						last = 0
						pages.each do |i|
						
							if i > (last+1)
					%>
								<li>...</li>
					<%
							end
					%>
							<li><a href="#" onclick="go_to_comment_offset(<%=params[:limit]*(i-1)%>,'<%=params[:sort]%>');return false;" <%='class="active"' if i == current_page%>><%=i%></a></li>
					<%
							last = i
						end
					%>
                </ul>
            </span>
        </span>
        <span class="span-20 clearfix">
        </span>
    </span>
    <%
        end
    %>

    <script language="javascript">

        function go_to_comment_offset(offset,sort)
        {
            try {
                $.ajax({
                    type: "POST",
                    url: '/article_comment/',
                    cache: false,
                    data: {
                        authenticity_token: "<%=form_authenticity_token%>",
                        article_id:"<%=entity.id%>",
                        offset: offset,
						sort: sort
                    },
                    success: function(data){
                        try {
                            if (data.ok == true) {

                                $("#comment_panel").replaceWith(data.html);
                                //$("#comment_panel").hide();
                                $("#comment_panel").fadeIn();
                            }
                            else {

                            }

                        }
                        catch (e) {
                            $.error_log('comment_paging', e);
                            alert(e);
                        }

                    },
                    error: function(req, status, e){
                         if (req.status == 0) return;
                        alert('Cannot connect to the server. Please try again later.');
                    }
                });
            } catch (e)
            {
                $.error_log('comment_paging',e);
                alert(e);
            }
        }
		
		function delete_comment(sender,id)
		{
			if (!confirm('Are you sure you want to delete it?')) return;
			try
			{
				$(sender).loading_button(true);
				var data = {
					authenticity_token: "<%=form_authenticity_token%>",
					"id": id
				};
				
				
				$.ajax({
					type: "POST",
					url: '/article_comment/delete',
					cache: false,
					headers: {
						"Connection": "close"
					},
					data: data,
					success: function(response){
						if (response.ok == true) {
							$(sender).loading_button(false);
							$('#comment_view_' + id).fadeOut(function(){
								$('#comment_view_' + id).remove();
							});
						}
						else {
							$(sender).loading_button(false);
						}
					},
					error: function(req, status, e){
						$(sender).loading_button(false);
						if (req.status == 0) 
							return;
						alert('Cannot connect to the server. Please try again.')
					}
				});
			}catch (e)
		{
			$(sender).loading_button(false);
			$.error_log('article_comment_delete',e);
			alert(e);
		}
		}
    </script>
</span>
